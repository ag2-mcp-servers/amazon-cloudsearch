# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:05:24+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class APIVersion(RootModel[str]):
    root: str = Field(
        ...,
        description='The Amazon CloudSearch API version for a domain: 2011-02-01 or 2013-01-01.',
    )


class ARN(RootModel[str]):
    root: str = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the search domain. See <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html" target="_blank">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i> for more information.',
    )


class AlgorithmicStemming(Enum):
    none = 'none'
    minimal = 'minimal'
    light = 'light'
    full = 'full'


class AnalysisSchemeLanguage(Enum):
    ar = 'ar'
    bg = 'bg'
    ca = 'ca'
    cs = 'cs'
    da = 'da'
    de = 'de'
    el = 'el'
    en = 'en'
    es = 'es'
    eu = 'eu'
    fa = 'fa'
    fi = 'fi'
    fr = 'fr'
    ga = 'ga'
    gl = 'gl'
    he = 'he'
    hi = 'hi'
    hu = 'hu'
    hy = 'hy'
    id = 'id'
    it = 'it'
    ja = 'ja'
    ko = 'ko'
    lv = 'lv'
    mul = 'mul'
    nl = 'nl'
    no = 'no'
    pt = 'pt'
    ro = 'ro'
    ru = 'ru'
    sv = 'sv'
    th = 'th'
    tr = 'tr'
    zh_Hans = 'zh-Hans'
    zh_Hant = 'zh-Hant'


class BaseException(RootModel[Any]):
    root: Any


class Boolean(RootModel[bool]):
    root: bool


class DisabledOperationException(RootModel[Any]):
    root: Any


class DomainId(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64) = Field(
        ..., description='An internally generated unique identifier for a domain.'
    )


class DomainName(
    RootModel[constr(pattern=r'[a-z][a-z0-9\-]+', min_length=3, max_length=28)]
):
    root: constr(pattern=r'[a-z][a-z0-9\-]+', min_length=3, max_length=28) = Field(
        ...,
        description='A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).',
    )


class DomainNameList(RootModel[List[DomainName]]):
    root: List[DomainName] = Field(..., description='A list of domain names.')


class DomainNameMap(RootModel[Optional[Dict[str, APIVersion]]]):
    root: Optional[Dict[str, APIVersion]] = None


class Double(RootModel[float]):
    root: float


class DynamicFieldName(
    RootModel[
        constr(
            pattern=r'([a-z][a-z0-9_]*\*?|\*[a-z0-9_]*)', min_length=1, max_length=64
        )
    ]
):
    root: constr(
        pattern=r'([a-z][a-z0-9_]*\*?|\*[a-z0-9_]*)', min_length=1, max_length=64
    )


class DynamicFieldNameList(RootModel[List[DynamicFieldName]]):
    root: List[DynamicFieldName]


class ExpressionValue(RootModel[constr(min_length=1, max_length=10240)]):
    root: constr(min_length=1, max_length=10240) = Field(
        ...,
        description='The expression to evaluate for sorting while processing a search request. The <code>Expression</code> syntax is based on JavaScript expressions. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html" target="_blank">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.',
    )


class FieldName(
    RootModel[constr(pattern=r'[a-z][a-z0-9_]*', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[a-z][a-z0-9_]*', min_length=1, max_length=64) = Field(
        ...,
        description="<p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p> <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p> <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>",
    )


class FieldNameCommaList(
    RootModel[constr(pattern=r'\s*[a-z*][a-z0-9_]*\*?\s*(,\s*[a-z*][a-z0-9_]*\*?\s*)*')]
):
    root: constr(pattern=r'\s*[a-z*][a-z0-9_]*\*?\s*(,\s*[a-z*][a-z0-9_]*\*?\s*)*')


class FieldNameList(RootModel[List[FieldName]]):
    root: List[FieldName] = Field(..., description='A list of field names.')


class FieldValue(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024) = Field(
        ..., description='The value of a field attribute.'
    )


class IndexDocumentsRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')


class IndexDocumentsResponse(BaseModel):
    FieldNames: Optional[FieldNameList] = None


class IndexFieldType(Enum):
    int = 'int'
    double = 'double'
    literal = 'literal'
    text = 'text'
    date = 'date'
    latlon = 'latlon'
    int_array = 'int-array'
    double_array = 'double-array'
    literal_array = 'literal-array'
    text_array = 'text-array'
    date_array = 'date-array'


class InstanceCount(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class InternalException(RootModel[Any]):
    root: Any


class InvalidTypeException(RootModel[Any]):
    root: Any


class LatLonOptions(BaseModel):
    DefaultValue: Optional[FieldValue] = None
    FacetEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None
    SearchEnabled: Optional[Boolean] = None
    SortEnabled: Optional[Boolean] = None
    SourceField: Optional[FieldName] = None


class LimitExceededException(RootModel[Any]):
    root: Any


class ListDomainNamesResponse(BaseModel):
    DomainNames: Optional[DomainNameMap] = None


class LiteralArrayOptions(BaseModel):
    DefaultValue: Optional[FieldValue] = None
    FacetEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None
    SearchEnabled: Optional[Boolean] = None
    SourceFields: Optional[FieldNameCommaList] = None


class LiteralOptions(BaseModel):
    DefaultValue: Optional[FieldValue] = None
    FacetEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None
    SearchEnabled: Optional[Boolean] = None
    SortEnabled: Optional[Boolean] = None
    SourceField: Optional[FieldName] = None


class Long(RootModel[int_aliased]):
    root: int_aliased


class MaximumPartitionCount(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaximumReplicationCount(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MultiAZ(RootModel[bool]):
    root: bool


class OptionState(Enum):
    RequiresIndexDocuments = 'RequiresIndexDocuments'
    Processing = 'Processing'
    Active = 'Active'
    FailedToValidate = 'FailedToValidate'


class PartitionCount(RootModel[conint(ge=1)]):
    root: conint(ge=1) = Field(
        ..., description="The number of partitions used to hold the domain's index."
    )


class PartitionInstanceType(Enum):
    search_m1_small = 'search.m1.small'
    search_m1_large = 'search.m1.large'
    search_m2_xlarge = 'search.m2.xlarge'
    search_m2_2xlarge = 'search.m2.2xlarge'
    search_m3_medium = 'search.m3.medium'
    search_m3_large = 'search.m3.large'
    search_m3_xlarge = 'search.m3.xlarge'
    search_m3_2xlarge = 'search.m3.2xlarge'
    search_small = 'search.small'
    search_medium = 'search.medium'
    search_large = 'search.large'
    search_xlarge = 'search.xlarge'
    search_2xlarge = 'search.2xlarge'
    search_previousgeneration_small = 'search.previousgeneration.small'
    search_previousgeneration_large = 'search.previousgeneration.large'
    search_previousgeneration_xlarge = 'search.previousgeneration.xlarge'
    search_previousgeneration_2xlarge = 'search.previousgeneration.2xlarge'


class PolicyDocument(RootModel[str]):
    root: str = Field(
        ...,
        description='Access rules for a domain\'s document or search service endpoints. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html" target="_blank">Configuring Access for a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>. The maximum size of a policy document is 100 KB.',
    )


class ResourceAlreadyExistsException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class SearchInstanceType(RootModel[str]):
    root: str = Field(
        ...,
        description='The instance type (such as <code>search.m1.small</code>) that is being used to process search requests.',
    )


class ServiceUrl(RootModel[str]):
    root: str = Field(
        ...,
        description='The endpoint to which service requests can be submitted. For example, <code>search-imdb-movies-oopcnjfn6ugofer3zx5iadxxca.eu-west-1.cloudsearch.amazonaws.com</code> or <code>doc-imdb-movies-oopcnjfn6ugofer3zx5iadxxca.eu-west-1.cloudsearch.amazonaws.com</code>.',
    )


class StandardName(
    RootModel[constr(pattern=r'[a-z][a-z0-9_]*', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[a-z][a-z0-9_]*', min_length=1, max_length=64) = Field(
        ...,
        description='Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).',
    )


class StandardNameList(RootModel[List[StandardName]]):
    root: List[StandardName]


class String(RootModel[str]):
    root: str


class SuggesterFuzzyMatching(Enum):
    none = 'none'
    low = 'low'
    high = 'high'


class TLSSecurityPolicy(Enum):
    Policy_Min_TLS_1_0_2019_07 = 'Policy-Min-TLS-1-0-2019-07'
    Policy_Min_TLS_1_2_2019_07 = 'Policy-Min-TLS-1-2-2019-07'


class UIntValue(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class UpdateAvailabilityOptionsRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    MultiAZ: Boolean


class UpdateServiceAccessPoliciesRequest(BaseModel):
    AccessPolicies: PolicyDocument
    DomainName_1: DomainName = Field(..., alias='DomainName')


class UpdateTimestamp(RootModel[datetime]):
    root: datetime


class ValidationException(RootModel[Any]):
    root: Any


class Word(RootModel[constr(pattern=r'[\S]+')]):
    root: constr(pattern=r'[\S]+')


class Action(Enum):
    BuildSuggesters = 'BuildSuggesters'


class Version(Enum):
    field_2013_01_01 = '2013-01-01'


class Action4(Enum):
    CreateDomain = 'CreateDomain'


class Action8(Enum):
    DefineAnalysisScheme = 'DefineAnalysisScheme'


class Expression(BaseModel):
    ExpressionName: StandardName
    ExpressionValue_1: ExpressionValue = Field(..., alias='ExpressionValue')


class Action12(Enum):
    DefineExpression = 'DefineExpression'


class Action16(Enum):
    DefineIndexField = 'DefineIndexField'


class Action20(Enum):
    DefineSuggester = 'DefineSuggester'


class Action24(Enum):
    DeleteAnalysisScheme = 'DeleteAnalysisScheme'


class Action28(Enum):
    DeleteDomain = 'DeleteDomain'


class Action32(Enum):
    DeleteExpression = 'DeleteExpression'


class Action36(Enum):
    DeleteIndexField = 'DeleteIndexField'


class Action40(Enum):
    DeleteSuggester = 'DeleteSuggester'


class Action44(Enum):
    DescribeAnalysisSchemes = 'DescribeAnalysisSchemes'


class AnalysisSchemeNames(RootModel[List[StandardName]]):
    root: List[StandardName]


class Action48(Enum):
    DescribeAvailabilityOptions = 'DescribeAvailabilityOptions'


class Action52(Enum):
    DescribeDomainEndpointOptions = 'DescribeDomainEndpointOptions'


class Action56(Enum):
    DescribeDomains = 'DescribeDomains'


class DomainNames(RootModel[List[DomainName]]):
    root: List[DomainName] = Field(..., description='A list of domain names.')


class Action60(Enum):
    DescribeExpressions = 'DescribeExpressions'


class ExpressionNames(RootModel[List[StandardName]]):
    root: List[StandardName]


class Action64(Enum):
    DescribeIndexFields = 'DescribeIndexFields'


class FieldNames(RootModel[List[DynamicFieldName]]):
    root: List[DynamicFieldName]


class Action68(Enum):
    DescribeScalingParameters = 'DescribeScalingParameters'


class Action72(Enum):
    DescribeServiceAccessPolicies = 'DescribeServiceAccessPolicies'


class Action76(Enum):
    DescribeSuggesters = 'DescribeSuggesters'


class SuggesterNames(RootModel[List[StandardName]]):
    root: List[StandardName]


class Action80(Enum):
    IndexDocuments = 'IndexDocuments'


class Action84(Enum):
    ListDomainNames = 'ListDomainNames'


class Action88(Enum):
    UpdateAvailabilityOptions = 'UpdateAvailabilityOptions'


class DomainEndpointOptions(BaseModel):
    EnforceHTTPS: Optional[Boolean] = None
    TLSSecurityPolicy_1: Optional[TLSSecurityPolicy] = Field(
        None, alias='TLSSecurityPolicy'
    )


class Action92(Enum):
    UpdateDomainEndpointOptions = 'UpdateDomainEndpointOptions'


class ScalingParameters(BaseModel):
    DesiredInstanceType: Optional[PartitionInstanceType] = None
    DesiredPartitionCount: Optional[UIntValue] = None
    DesiredReplicationCount: Optional[UIntValue] = None


class Action96(Enum):
    UpdateScalingParameters = 'UpdateScalingParameters'


class Action100(Enum):
    UpdateServiceAccessPolicies = 'UpdateServiceAccessPolicies'


class AnalysisOptions(BaseModel):
    AlgorithmicStemming_1: Optional[AlgorithmicStemming] = Field(
        None, alias='AlgorithmicStemming'
    )
    JapaneseTokenizationDictionary: Optional[String] = None
    StemmingDictionary: Optional[String] = None
    Stopwords: Optional[String] = None
    Synonyms: Optional[String] = None


class AnalysisScheme(BaseModel):
    AnalysisOptions_1: Optional[AnalysisOptions] = Field(None, alias='AnalysisOptions')
    AnalysisSchemeLanguage_1: AnalysisSchemeLanguage = Field(
        ..., alias='AnalysisSchemeLanguage'
    )
    AnalysisSchemeName: StandardName


class BuildSuggestersRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')


class BuildSuggestersResponse(BaseModel):
    FieldNames: Optional[FieldNameList] = None


class CreateDomainRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')


class DateArrayOptions(BaseModel):
    DefaultValue: Optional[FieldValue] = None
    FacetEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None
    SearchEnabled: Optional[Boolean] = None
    SourceFields: Optional[FieldNameCommaList] = None


class DateOptions(BaseModel):
    DefaultValue: Optional[FieldValue] = None
    FacetEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None
    SearchEnabled: Optional[Boolean] = None
    SortEnabled: Optional[Boolean] = None
    SourceField: Optional[FieldName] = None


class DefineAnalysisSchemeRequest(BaseModel):
    AnalysisScheme_1: AnalysisScheme = Field(..., alias='AnalysisScheme')
    DomainName_1: DomainName = Field(..., alias='DomainName')


class DeleteAnalysisSchemeRequest(BaseModel):
    AnalysisSchemeName: StandardName
    DomainName_1: DomainName = Field(..., alias='DomainName')


class DeleteDomainRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')


class DeleteExpressionRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    ExpressionName: StandardName


class DeleteIndexFieldRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    IndexFieldName: DynamicFieldName


class DeleteSuggesterRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    SuggesterName: StandardName


class DescribeAnalysisSchemesRequest(BaseModel):
    AnalysisSchemeNames: Optional[StandardNameList] = None
    Deployed: Optional[Boolean] = None
    DomainName_1: DomainName = Field(..., alias='DomainName')


class DescribeAvailabilityOptionsRequest(BaseModel):
    Deployed: Optional[Boolean] = None
    DomainName_1: DomainName = Field(..., alias='DomainName')


class DescribeDomainEndpointOptionsRequest(BaseModel):
    Deployed: Optional[Boolean] = None
    DomainName_1: DomainName = Field(..., alias='DomainName')


class DescribeDomainsRequest(BaseModel):
    DomainNames: Optional[DomainNameList] = None


class DescribeExpressionsRequest(BaseModel):
    Deployed: Optional[Boolean] = None
    DomainName_1: DomainName = Field(..., alias='DomainName')
    ExpressionNames: Optional[StandardNameList] = None


class DescribeIndexFieldsRequest(BaseModel):
    Deployed: Optional[Boolean] = None
    DomainName_1: DomainName = Field(..., alias='DomainName')
    FieldNames: Optional[DynamicFieldNameList] = None


class DescribeScalingParametersRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')


class DescribeServiceAccessPoliciesRequest(BaseModel):
    Deployed: Optional[Boolean] = None
    DomainName_1: DomainName = Field(..., alias='DomainName')


class DescribeSuggestersRequest(BaseModel):
    Deployed: Optional[Boolean] = None
    DomainName_1: DomainName = Field(..., alias='DomainName')
    SuggesterNames: Optional[StandardNameList] = None


class DocumentSuggesterOptions(BaseModel):
    FuzzyMatching: Optional[SuggesterFuzzyMatching] = None
    SortExpression: Optional[String] = None
    SourceField: FieldName


class DoubleArrayOptions(BaseModel):
    DefaultValue: Optional[Double] = None
    FacetEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None
    SearchEnabled: Optional[Boolean] = None
    SourceFields: Optional[FieldNameCommaList] = None


class DoubleOptions(BaseModel):
    DefaultValue: Optional[Double] = None
    FacetEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None
    SearchEnabled: Optional[Boolean] = None
    SortEnabled: Optional[Boolean] = None
    SourceField: Optional[FieldName] = None


class IntArrayOptions(BaseModel):
    DefaultValue: Optional[Long] = None
    FacetEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None
    SearchEnabled: Optional[Boolean] = None
    SourceFields: Optional[FieldNameCommaList] = None


class IntOptions(BaseModel):
    DefaultValue: Optional[Long] = None
    FacetEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None
    SearchEnabled: Optional[Boolean] = None
    SortEnabled: Optional[Boolean] = None
    SourceField: Optional[FieldName] = None


class Limits(BaseModel):
    MaximumPartitionCount_1: MaximumPartitionCount = Field(
        ..., alias='MaximumPartitionCount'
    )
    MaximumReplicationCount_1: MaximumReplicationCount = Field(
        ..., alias='MaximumReplicationCount'
    )


class OptionStatus(BaseModel):
    CreationDate: UpdateTimestamp
    PendingDeletion: Optional[Boolean] = None
    State: OptionState
    UpdateDate: UpdateTimestamp
    UpdateVersion: Optional[UIntValue] = None


class ScalingParametersStatus(BaseModel):
    Options: ScalingParameters
    Status: OptionStatus


class ServiceEndpoint(BaseModel):
    Endpoint: Optional[ServiceUrl] = None


class Suggester(BaseModel):
    DocumentSuggesterOptions_1: DocumentSuggesterOptions = Field(
        ..., alias='DocumentSuggesterOptions'
    )
    SuggesterName: StandardName


class SuggesterStatus(BaseModel):
    Options: Suggester
    Status: OptionStatus


class SuggesterStatusList(RootModel[List[SuggesterStatus]]):
    root: List[SuggesterStatus] = Field(
        ..., description='Contains the status of multiple suggesters.'
    )


class TextArrayOptions(BaseModel):
    AnalysisScheme: Optional[Word] = None
    DefaultValue: Optional[FieldValue] = None
    HighlightEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None
    SourceFields: Optional[FieldNameCommaList] = None


class TextOptions(BaseModel):
    AnalysisScheme: Optional[Word] = None
    DefaultValue: Optional[FieldValue] = None
    HighlightEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None
    SortEnabled: Optional[Boolean] = None
    SourceField: Optional[FieldName] = None


class UpdateDomainEndpointOptionsRequest(BaseModel):
    DomainEndpointOptions_1: DomainEndpointOptions = Field(
        ..., alias='DomainEndpointOptions'
    )
    DomainName_1: DomainName = Field(..., alias='DomainName')


class UpdateScalingParametersRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    ScalingParameters_1: ScalingParameters = Field(..., alias='ScalingParameters')


class UpdateScalingParametersResponse(BaseModel):
    ScalingParameters: ScalingParametersStatus


class IndexField(BaseModel):
    DateArrayOptions_1: Optional[DateArrayOptions] = Field(
        None, alias='DateArrayOptions'
    )
    DateOptions_1: Optional[DateOptions] = Field(None, alias='DateOptions')
    DoubleArrayOptions_1: Optional[DoubleArrayOptions] = Field(
        None, alias='DoubleArrayOptions'
    )
    DoubleOptions_1: Optional[DoubleOptions] = Field(None, alias='DoubleOptions')
    IndexFieldName: DynamicFieldName
    IndexFieldType_1: IndexFieldType = Field(..., alias='IndexFieldType')
    IntArrayOptions_1: Optional[IntArrayOptions] = Field(None, alias='IntArrayOptions')
    IntOptions_1: Optional[IntOptions] = Field(None, alias='IntOptions')
    LatLonOptions_1: Optional[LatLonOptions] = Field(None, alias='LatLonOptions')
    LiteralArrayOptions_1: Optional[LiteralArrayOptions] = Field(
        None, alias='LiteralArrayOptions'
    )
    LiteralOptions_1: Optional[LiteralOptions] = Field(None, alias='LiteralOptions')
    TextArrayOptions_1: Optional[TextArrayOptions] = Field(
        None, alias='TextArrayOptions'
    )
    TextOptions_1: Optional[TextOptions] = Field(None, alias='TextOptions')


class AccessPoliciesStatus(BaseModel):
    Options: PolicyDocument
    Status: OptionStatus


class AnalysisSchemeStatus(BaseModel):
    Options: AnalysisScheme
    Status: OptionStatus


class AnalysisSchemeStatusList(RootModel[List[AnalysisSchemeStatus]]):
    root: List[AnalysisSchemeStatus] = Field(
        ..., description='A list of the analysis schemes configured for a domain.'
    )


class AvailabilityOptionsStatus(BaseModel):
    Options: MultiAZ
    Status: OptionStatus


class DefineAnalysisSchemeResponse(BaseModel):
    AnalysisScheme: AnalysisSchemeStatus


class DefineExpressionRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    Expression_1: Expression = Field(..., alias='Expression')


class DefineSuggesterRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    Suggester_1: Suggester = Field(..., alias='Suggester')


class DefineSuggesterResponse(BaseModel):
    Suggester: SuggesterStatus


class DeleteAnalysisSchemeResponse(BaseModel):
    AnalysisScheme: AnalysisSchemeStatus


class DeleteSuggesterResponse(BaseModel):
    Suggester: SuggesterStatus


class DescribeAnalysisSchemesResponse(BaseModel):
    AnalysisSchemes: AnalysisSchemeStatusList


class DescribeAvailabilityOptionsResponse(BaseModel):
    AvailabilityOptions: Optional[AvailabilityOptionsStatus] = None


class DescribeScalingParametersResponse(BaseModel):
    ScalingParameters: ScalingParametersStatus


class DescribeServiceAccessPoliciesResponse(BaseModel):
    AccessPolicies: AccessPoliciesStatus


class DescribeSuggestersResponse(BaseModel):
    Suggesters: SuggesterStatusList


class DomainEndpointOptionsStatus(BaseModel):
    Options: DomainEndpointOptions
    Status: OptionStatus


class DomainStatus(BaseModel):
    ARN_1: Optional[ARN] = Field(None, alias='ARN')
    Created: Optional[Boolean] = None
    Deleted: Optional[Boolean] = None
    DocService: Optional[ServiceEndpoint] = None
    DomainId_1: DomainId = Field(..., alias='DomainId')
    DomainName_1: DomainName = Field(..., alias='DomainName')
    Limits_1: Optional[Limits] = Field(None, alias='Limits')
    Processing: Optional[Boolean] = None
    RequiresIndexDocuments: Boolean
    SearchInstanceCount: Optional[InstanceCount] = None
    SearchInstanceType_1: Optional[SearchInstanceType] = Field(
        None, alias='SearchInstanceType'
    )
    SearchPartitionCount: Optional[PartitionCount] = None
    SearchService: Optional[ServiceEndpoint] = None


class DomainStatusList(RootModel[List[DomainStatus]]):
    root: List[DomainStatus] = Field(
        ..., description='A list that contains the status of each requested domain.'
    )


class ExpressionStatus(BaseModel):
    Options: Expression
    Status: OptionStatus


class ExpressionStatusList(RootModel[List[ExpressionStatus]]):
    root: List[ExpressionStatus] = Field(
        ..., description='Contains the status of multiple expressions.'
    )


class IndexFieldStatus(BaseModel):
    Options: IndexField
    Status: OptionStatus


class IndexFieldStatusList(RootModel[List[IndexFieldStatus]]):
    root: List[IndexFieldStatus] = Field(
        ..., description='Contains the status of multiple index fields.'
    )


class UpdateAvailabilityOptionsResponse(BaseModel):
    AvailabilityOptions: Optional[AvailabilityOptionsStatus] = None


class UpdateDomainEndpointOptionsResponse(BaseModel):
    DomainEndpointOptions: Optional[DomainEndpointOptionsStatus] = None


class UpdateServiceAccessPoliciesResponse(BaseModel):
    AccessPolicies: AccessPoliciesStatus


class CreateDomainResponse(BaseModel):
    DomainStatus_1: Optional[DomainStatus] = Field(None, alias='DomainStatus')


class DefineExpressionResponse(BaseModel):
    Expression: ExpressionStatus


class DefineIndexFieldRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    IndexField_1: IndexField = Field(..., alias='IndexField')


class DefineIndexFieldResponse(BaseModel):
    IndexField: IndexFieldStatus


class DeleteDomainResponse(BaseModel):
    DomainStatus_1: Optional[DomainStatus] = Field(None, alias='DomainStatus')


class DeleteExpressionResponse(BaseModel):
    Expression: ExpressionStatus


class DeleteIndexFieldResponse(BaseModel):
    IndexField: IndexFieldStatus


class DescribeDomainEndpointOptionsResponse(BaseModel):
    DomainEndpointOptions: Optional[DomainEndpointOptionsStatus] = None


class DescribeDomainsResponse(BaseModel):
    DomainStatusList_1: DomainStatusList = Field(..., alias='DomainStatusList')


class DescribeExpressionsResponse(BaseModel):
    Expressions: ExpressionStatusList


class DescribeIndexFieldsResponse(BaseModel):
    IndexFields: IndexFieldStatusList
